{"ast":null,"code":"import * as THREE from \"three\";\nconst version = /* @__PURE__ */(() => parseInt(THREE.REVISION.replace(/\\D+/g, \"\")))();\nconst WebGLMultipleRenderTargets = version >= 162 ? class extends THREE.WebGLRenderTarget {\n  constructor(width = 1, height = 1, count = 1, options = {}) {\n    super(width, height, {\n      ...options,\n      count\n    });\n    this.isWebGLMultipleRenderTargets = true;\n  }\n  get texture() {\n    return this.textures;\n  }\n} : class extends THREE.WebGLRenderTarget {\n  constructor(width = 1, height = 1, count = 1, options = {}) {\n    super(width, height, options);\n    this.isWebGLMultipleRenderTargets = true;\n    const texture = this.texture;\n    this.texture = [];\n    for (let i = 0; i < count; i++) {\n      this.texture[i] = texture.clone();\n      this.texture[i].isRenderTargetTexture = true;\n    }\n  }\n  setSize(width, height, depth = 1) {\n    if (this.width !== width || this.height !== height || this.depth !== depth) {\n      this.width = width;\n      this.height = height;\n      this.depth = depth;\n      for (let i = 0, il = this.texture.length; i < il; i++) {\n        this.texture[i].image.width = width;\n        this.texture[i].image.height = height;\n        this.texture[i].image.depth = depth;\n      }\n      this.dispose();\n    }\n    this.viewport.set(0, 0, width, height);\n    this.scissor.set(0, 0, width, height);\n  }\n  copy(source) {\n    this.dispose();\n    this.width = source.width;\n    this.height = source.height;\n    this.depth = source.depth;\n    this.scissor.copy(source.scissor);\n    this.scissorTest = source.scissorTest;\n    this.viewport.copy(source.viewport);\n    this.depthBuffer = source.depthBuffer;\n    this.stencilBuffer = source.stencilBuffer;\n    if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();\n    this.texture.length = 0;\n    for (let i = 0, il = source.texture.length; i < il; i++) {\n      this.texture[i] = source.texture[i].clone();\n      this.texture[i].isRenderTargetTexture = true;\n    }\n    return this;\n  }\n};\nexport { WebGLMultipleRenderTargets };","map":{"version":3,"names":["version","parseInt","THREE","REVISION","replace","WebGLMultipleRenderTargets","WebGLRenderTarget","constructor","width","height","count","options","isWebGLMultipleRenderTargets","texture","textures","i","clone","isRenderTargetTexture","setSize","depth","il","length","image","dispose","viewport","set","scissor","copy","source","scissorTest","depthBuffer","stencilBuffer","depthTexture"],"sources":["/Users/julienwuthrich/GitHub/stock-screener/frontend/node_modules/@react-three/postprocessing/src/compat.js"],"sourcesContent":["import * as THREE from 'three'\n\nconst version = /* @__PURE__ */ (() => parseInt(THREE.REVISION.replace(/\\D+/g, '')))()\n\n// NOTE: WebGLMultipleRenderTargets is removed since r172, so we implement it ourselves.\n// https://github.com/mrdoob/three.js/pull/26427\nexport const WebGLMultipleRenderTargets =\n  version >= 162\n    ? class extends THREE.WebGLRenderTarget {\n        constructor(width = 1, height = 1, count = 1, options = {}) {\n          super(width, height, { ...options, count })\n\n          this.isWebGLMultipleRenderTargets = true\n        }\n\n        get texture() {\n          return this.textures\n        }\n      }\n    : class extends THREE.WebGLRenderTarget {\n        constructor(width = 1, height = 1, count = 1, options = {}) {\n          super(width, height, options)\n\n          this.isWebGLMultipleRenderTargets = true\n\n          const texture = this.texture\n\n          this.texture = []\n\n          for (let i = 0; i < count; i++) {\n            this.texture[i] = texture.clone()\n            this.texture[i].isRenderTargetTexture = true\n          }\n        }\n\n        setSize(width, height, depth = 1) {\n          if (this.width !== width || this.height !== height || this.depth !== depth) {\n            this.width = width\n            this.height = height\n            this.depth = depth\n\n            for (let i = 0, il = this.texture.length; i < il; i++) {\n              this.texture[i].image.width = width\n              this.texture[i].image.height = height\n              this.texture[i].image.depth = depth\n            }\n\n            this.dispose()\n          }\n\n          this.viewport.set(0, 0, width, height)\n          this.scissor.set(0, 0, width, height)\n        }\n\n        copy(source) {\n          this.dispose()\n\n          this.width = source.width\n          this.height = source.height\n          this.depth = source.depth\n\n          this.scissor.copy(source.scissor)\n          this.scissorTest = source.scissorTest\n\n          this.viewport.copy(source.viewport)\n\n          this.depthBuffer = source.depthBuffer\n          this.stencilBuffer = source.stencilBuffer\n\n          if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone()\n\n          this.texture.length = 0\n\n          for (let i = 0, il = source.texture.length; i < il; i++) {\n            this.texture[i] = source.texture[i].clone()\n            this.texture[i].isRenderTargetTexture = true\n          }\n\n          return this\n        }\n      }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}